name: Build

on:
    push:
        tags:
            - '*' # Run once per tag

jobs:
    get-versions:
        runs-on: ubuntu-latest
        outputs:
            package_version: ${{ steps.set_versions.outputs.package_version }}
        steps:
            - uses: actions/checkout@v3
            - name: Get the version
              id: set_versions
              run: |
                  echo "package_version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    release:
        name: Release ${{ matrix.os }} ${{ matrix.arch }}
        runs-on: ${{ matrix.os }}
        needs: get-versions

        permissions:
            contents: write

        strategy:
            matrix:
                # os: [macos-latest, ubuntu-latest, windows-latest]
                include:
                    - os: ubuntu-latest
                      arch: x64
                    - os: windows-latest
                      arch: x64
                    - os: macos-latest
                      arch: x64
                    # - os: macos-latest
                    #   arch: arm64

        steps:
            - name: Check out Git repository
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Set up Node
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: 3.x

            - name: Install Dependencies
              run: npm ci
              shell: bash

            - name: Get version from Git tag
              id: get_tag
              run: |
                  TAG=${GITHUB_REF#refs/tags/}
                  VERSION=${TAG#v}
                  echo "TAG=$TAG" >> $GITHUB_ENV
                  echo "VERSION=$VERSION" >> $GITHUB_ENV
                  echo "Setting version to $VERSION from tag $TAG"
              shell: bash

            - name: Sync version with Git tag
              run: |
                  echo "Setting version to ${{ env.VERSION }} from tag ${{ env.LATEST_TAG }}"
                  node -e "
                    const fs = require('fs');
                    const files = ['package.json', 'package-lock.json'];
                    const version = '${{ env.VERSION }}';
                    for (const file of files) {
                      if (!fs.existsSync(file)) continue;
                      const json = JSON.parse(fs.readFileSync(file, 'utf8'));
                      json.version = version;
                      if (
                        file === 'package-lock.json' &&
                        json.packages &&
                        typeof json.packages[''] === 'object'
                      ) {
                        json.packages[''].version = version;
                      }
                      fs.writeFileSync(file, JSON.stringify(json, null, 2) + '\n');
                    }
                  "

            - name: Build
              run: npm run dist -- --publish never
              shell: bash

            # download 'SSLcom/esigner-codesign' to a folder called 'esigner-codesign' in the root of the project
            - name: Checkout esigner-codesign repository (Windows)
              if: matrix.os == 'windows-latest'
              uses: actions/checkout@v3
              with:
                  repository: 'SSLcom/esigner-codesign'
                  path: esigner-codesign

            # builds, signs, and publishes - actual signing happens within electron-builder.js
            - name: Publish (Windows)
              if: matrix.os == 'windows-latest'
              run: npm run dist && npx electron-builder build --config electron-builder.js -p always
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  # NOTE: must explicitly pass in even the parameters that esigner-codesign says are optional since we're not using the action directly, but rather passing the params in as env vars:
                  CODE_SIGN_SCRIPT_PATH: '${{ github.workspace }}/esigner-codesign/dist/index.js'
                  INPUT_COMMAND: 'sign'
                  INPUT_FILE_PATH: '${{ github.workspace }}/dist/Void Event Launcher Setup ${{ needs.get-versions.outputs.package_version }}.exe'
                  INPUT_OVERRIDE: 'true'
                  INPUT_MALWARE_BLOCK: 'false'
                  INPUT_CLEAN_LOGS: 'false'
                  INPUT_JVM_MAX_MEMORY: '1024M'
                  INPUT_ENVIRONMENT_NAME: 'PROD'
                  INPUT_USERNAME: ${{ secrets.SSL_USERNAME }}
                  INPUT_PASSWORD: ${{ secrets.SSL_PASSWORD }}
                  INPUT_TOTP_SECRET: ${{ secrets.SSL_TOTP_SECRET }}
                  INPUT_CREDENTIAL_ID: ${{ secrets.CREDENTIAL_ID }}
              shell: bash

            - name: Publish Release (Non-Windows)
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              if: matrix.os != 'windows-latest'
              run: npx electron-builder --publish always
              shell: bash
