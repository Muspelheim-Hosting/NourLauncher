name: Build and Sign

on:
    push:
        tags:
            - '*'

jobs:
    build-all:
        name: Build ${{ matrix.os }} ${{ matrix.arch }}
        runs-on: ${{ matrix.os }}

        strategy:
            matrix:
                include:
                    - os: ubuntu-latest
                      arch: x64
                    - os: macos-latest
                      arch: x64
                    - os: windows-latest
                      arch: x64

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: 3.x

            - name: Install dependencies
              run: npm ci

            - name: Get version from Git tag
              id: get_tag
              run: |
                  TAG=${GITHUB_REF#refs/tags/}
                  VERSION=${TAG#v}
                  echo "VERSION=$VERSION" >> $GITHUB_ENV
              shell: bash

            - name: Sync version with Git tag
              run: |
                  echo "Syncing version to ${{ env.VERSION }}"
                  node -e "
                    const fs = require('fs');
                    const files = ['package.json', 'package-lock.json'];
                    const version = '${{ env.VERSION }}';
                    for (const file of files) {
                      if (!fs.existsSync(file)) continue;
                      const json = JSON.parse(fs.readFileSync(file, 'utf8'));
                      json.version = version;
                      if (
                        file === 'package-lock.json' &&
                        json.packages &&
                        typeof json.packages[''] === 'object'
                      ) {
                        json.packages[''].version = version;
                      }
                      fs.writeFileSync(file, JSON.stringify(json, null, 2) + '\n');
                    }
                  "

            - name: Build app
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: npm run dist

            - name: Upload built artifact
              uses: actions/upload-artifact@v3
              with:
                  name: build-${{ matrix.os }}-${{ matrix.arch }}
                  path: dist/

    sign-windows:
        name: Sign Windows EXE
        runs-on: windows-latest
        needs: build-all

        steps:
            - name: Download Windows build artifact
              uses: actions/download-artifact@v3
              with:
                  name: build-windows-latest-x64
                  path: dist/

            - name: Install Chocolatey and oathtool
              run: |
                  Set-ExecutionPolicy Bypass -Scope Process -Force
                  iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
                  choco install oathtool -y

            - name: Generate TOTP
              id: totp
              shell: pwsh
              run: |
                  $code = oathtool --totp -b "${{ secrets.SSL_TOTP_SECRET }}"
                  echo "totp=$code" >> $env:GITHUB_OUTPUT

            - name: Download sslsigntool
              run: |
                  Invoke-WebRequest -Uri "https://cdn.ssl.com/sslsigntool/sslsigntool.exe" -OutFile "sslsigntool.exe"

            - name: Find and sign Windows EXE
              id: sign
              shell: pwsh
              run: |
                  $exeFile = Get-ChildItem -Path dist -Filter *.exe | Where-Object { $_.Name -like "*setup*.exe" } | Select-Object -First 1
                  if (-not $exeFile) { Write-Error "EXE not found."; exit 1 }
                  $signedFile = "$($exeFile.DirectoryName)\$($exeFile.BaseName)-signed.exe"
                  .\sslsigntool.exe sign `
                    --username "${{ secrets.SSL_USERNAME }}" `
                    --password "${{ secrets.SSL_PASSWORD }}" `
                    --totp "${{ steps.totp.outputs.totp }}" `
                    --input $exeFile.FullName `
                    --output $signedFile `
                    --name "Void Event Launcher" `
                    --description "Void Event Launcher" `
                    --url "https://voideventhub.net/"
                  echo "signed=$signedFile" >> $env:GITHUB_OUTPUT

            - name: Upload signed EXE to GitHub release
              uses: softprops/action-gh-release@v1
              with:
                  files: ${{ steps.sign.outputs.signed }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
