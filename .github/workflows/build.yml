name: Build

on:
    push:
        tags:
            - '*' # Run once per tag

jobs:
    release:
        name: Release ${{ matrix.os }} ${{ matrix.arch }}
        runs-on: ${{ matrix.os }}

        permissions:
            contents: write

        strategy:
            matrix:
                # os: [macos-latest, ubuntu-latest, windows-latest]
                include:
                    - os: ubuntu-latest
                      arch: x64
                    - os: windows-latest
                      arch: x64
                    - os: macos-latest
                      arch: x64
                    # - os: macos-latest
                    #   arch: arm64

        steps:
            - name: Check out Git repository
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Set up Node
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: 3.x

            - name: Install Dependencies
              run: npm ci
              shell: bash

            - name: Get version from Git tag
              id: get_tag
              run: |
                  TAG=${GITHUB_REF#refs/tags/}
                  VERSION=${TAG#v}
                  echo "TAG=$TAG" >> $GITHUB_ENV
                  echo "VERSION=$VERSION" >> $GITHUB_ENV
                  echo "Setting version to $VERSION from tag $TAG"
              shell: bash

            - name: Sync version with Git tag
              run: |
                  echo "Setting version to ${{ env.VERSION }} from tag ${{ env.LATEST_TAG }}"
                  node -e "
                    const fs = require('fs');
                    const files = ['package.json', 'package-lock.json'];
                    const version = '${{ env.VERSION }}';
                    for (const file of files) {
                      if (!fs.existsSync(file)) continue;
                      const json = JSON.parse(fs.readFileSync(file, 'utf8'));
                      json.version = version;
                      if (
                        file === 'package-lock.json' &&
                        json.packages &&
                        typeof json.packages[''] === 'object'
                      ) {
                        json.packages[''].version = version;
                      }
                      fs.writeFileSync(file, JSON.stringify(json, null, 2) + '\n');
                    }
                  "

            - name: Build
              run: npm run dist -- --publish never
              shell: bash

            - name: Sign Windows Artifacts
              if: matrix.os == 'windows-latest'
              uses: sslcom/esigner-codesign@develop
              with:
                  command: batch_sign
                  username: ${{secrets.SSL_USERNAME}}
                  password: ${{secrets.SSL_PASSWORD}}
                  credential_id: ${{secrets.SSL_CREDENTIAL_ID}}
                  totp_secret: ${{secrets.SSL_TOTP_SECRET}}
                  dir_path: ${{ github.workspace }}/dist
                  output_path: ${{ github.workspace }}/signed
                  malware_block: false
                  clean_logs: true
                  jvm_max_memory: 1024M
                  signing_method: v1

            - name: Publish Release
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              if: matrix.os == 'windows-latest'
              run: |
                  echo "Publishing signed artifacts from ${{ github.workspace }}/signed"
                  npx electron-builder --publish always --prepackaged "${{ github.workspace }}/signed"
              shell: bash

            - name: Publish Release (Non-Windows)
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              if: matrix.os != 'windows-latest'
              run: npx electron-builder --publish always
              shell: bash
