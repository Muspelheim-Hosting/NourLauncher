name: Sync Version from Tag

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Only run on semver tags without 'v' prefix

jobs:
  sync-version:
    name: Sync and Commit Version
    runs-on: ubuntu-latest

    permissions:
        contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm ci

      - name: Sync version with Git tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "Setting version to $VERSION"
          node -e "
            const fs = require('fs');
            const files = ['package.json', 'package-lock.json'];
            const version = '$VERSION';
            for (const file of files) {
              if (!fs.existsSync(file)) continue;
              const json = JSON.parse(fs.readFileSync(file, 'utf8'));
              json.version = version;
              if (
                file === 'package-lock.json' &&
                json.packages &&
                typeof json.packages[''] === 'object'
              ) {
                json.packages[''].version = version;
              }
              fs.writeFileSync(file, JSON.stringify(json, null, 2) + '\n');
            }
          "

      - name: Commit version changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json
          git commit -m "chore: set version to ${GITHUB_REF#refs/tags/} [skip ci]" || echo "No changes to commit"
          git push origin HEAD:refs/heads/master
          
      - name: Create and push new tag for version commit and delete original tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          # Get the SHA of the version commit we just made
          COMMIT_SHA=$(git rev-parse HEAD)
          # Create a new tag with a suffix to distinguish it from the original tag
          NEW_TAG="v${VERSION}"
          git tag -a "${NEW_TAG}" ${COMMIT_SHA} -m "Release build v${VERSION}"
          git push origin "${NEW_TAG}"
          # Delete the original tag that triggered this workflow
          ORIGINAL_TAG=${GITHUB_REF#refs/tags/}
          git push --delete origin "${ORIGINAL_TAG}"